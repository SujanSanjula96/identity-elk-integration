input {
	http {
		host => "0.0.0.0" 
		port => <HTTP_SERVER_PORT> # Default 8080.
	}
}

# Add your filters / logstash plugins configuration here.
filter {
	
	mutate {
        gsub => [
          "[event][payloadData][identityProviderType]", "LOCAL", "Resident",
		  "[event][payloadData][identityProvider]", "LOCAL", "Resident",
		  "[event][payloadData][identityProviders]", "LOCAL", "Resident",
        ]
	}

	# Ruby code to convert the comma seperated roles into an array.
	ruby{
	    code =>"

		# Method to split the supplied string by comma, trim whitespace and return an array.
		def mapStringToArray(strFieldValue)

		# If string is not null, return array.
		if (strFieldValue != nil)
			fieldArr =  strFieldValue.split(',').map(&:strip).reject(&:empty?).uniq 
			return fieldArr                             
		end

        # Return empty array if string is nil.
		return []
		end

		vrtArr = mapStringToArray(event.get('[event][payloadData][rolesCommaSeparated]'))
		if vrtArr.length > 0                           
		event.set('[event][payloadData][rolesCommaSeparated]', vrtArr) 
		end

		event_array = []
		event_type = event.get('[event][payloadData][eventType]')
		idp_type = event.get('[event][payloadData][identityProviderType]')
		auth_step_success = event.get('[event][payloadData][authStepSuccess]')
        if (event_type == 'overall' || auth_step_success == false)
			event_array.push('Overall')
		end
		if (event_type == 'step')
			if (idp_type == 'Resident')
				event_array.push('Resident')
			end
			if (idp_type == 'FEDERATED')
				event_array.push('Federated')
			end
		end
		event.set('[event][payloadData][event_type_filter]', event_array)
	    "
	}

	# Session specific.
	if [eventType] == "session" {

		# User agent filter to transform the userAgent string into seperated fields.
		useragent {
			ecs_compatibility => disabled
			source => "[event][payloadData][userAgent]"
			target => "userAgentDetails"
		}

		date {
			match => [ "[event][payloadData][startTimestamp]" , "UNIX_MS" ]
			target => "startTime"
		}

		date {
			match => [ "[event][payloadData][terminationTimestamp]" , "UNIX_MS" ]
			target => "endTime"
		}

	} else if [eventType] == "auth" or [eventType] == "b2bauth" {

		# Geo ip filter to transform the IP address to location.
		geoip {
			ecs_compatibility => disabled
			source => "[event][payloadData][remoteIp]"
		}

		# Geo IP failure to lookup or local address.
		if "_geoip_lookup_failure" in [tags] {
			mutate {
				add_field => { "[geoip][country_name]" => "N/A" }
			}
		}
	}
}

output {

	# Separating event type as auth and session via the eventType header.
	if [@metadata][input][http][request][headers][eventtype] == "auth" {
		elasticsearch {
			hosts => ["https://localhost:9200"]
			cacert => "<ELASTICSEARCH_HOME>/config/certs/http_ca.crt"
			user => "<ELASTICSEARCH_USERNAME>"
			password => "<ELASTICSEARCH_USER_PASSWORD>"
			index => "wso2-iam-auth-raw"
			document_id => "%{[event][payloadData][eventId]}"
		}
	} else if [@metadata][input][http][request][headers][eventtype] == "session" {
		elasticsearch {
			hosts => ["https://localhost:9200"]
			cacert => "<ELASTICSEARCH_HOME>/config/certs/http_ca.crt"
			user => "<ELASTICSEARCH_USERNAME>"
			password => "<ELASTICSEARCH_USER_PASSWORD>"
			index => "wso2-iam-session-raw"
			document_id => "%{[event][payloadData][sessionId]}"
		}
		elasticsearch {
			hosts => ["https://localhost:9200"]
			cacert => "<ELASTICSEARCH_HOME>/config/certs/http_ca.crt"
			user => "<ELASTICSEARCH_USERNAME>"
			password => "<ELASTICSEARCH_USER_PASSWORD>"
			index => "wso2-iam-session-time-series"
		}
	} else if [@metadata][input][http][request][headers][eventtype] == "b2bauth" {
        elasticsearch {
            hosts => ["https://localhost:9200"]
            cacert => "<ELASTICSEARCH_HOME>/config/certs/http_ca.crt"
            user => "<ELASTICSEARCH_USERNAME>"
            password => "<ELASTICSEARCH_USER_PASSWORD>"
            index => "wso2-iam-b2b-auth-raw"
            document_id => "%{[event][payloadData][eventId]}"
        }
	}
} 
